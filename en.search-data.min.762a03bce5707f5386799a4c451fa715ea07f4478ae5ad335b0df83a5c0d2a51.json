[{"id":0,"href":"/visualcomputing/docs/shortcodes/p5/div/","title":"Div","section":"Docs","content":"p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div.\np5-div # {{\u0026lt; p5-div ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nScintillating grid # Look at this and also this among many more references there are.\np5-div markdown {{\u0026lt; p5-div sketch=\u0026#34;/visualcomputing/sketches/scintillating.js\u0026#34; \u0026gt;}} p5-instance-div # {{\u0026lt; p5-instance-div id=\u0026#34;sketchid\u0026#34; ver=\u0026#34;1.4.2\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; \u0026gt;}} // inline sketch code {{\u0026lt; /p5-instance-div \u0026gt;}} Note that the inline sketch should be coded in p5 instance mode syntax. All parameters are optional but id. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nLilac chaser # Look at this introductory reference.\np5-instance-div markdown {{\u0026lt; p5-instance-div id=\u0026#34;lilac-chaser\u0026#34; \u0026gt;}} // Adapted from [this](https://github.com/VisualComputing/Cognitive/blob/gh-pages/sketches/lilacChaser.js) let jump = 0; let count = 0; p5.setup = function() { p5.createCanvas(400, 400); p5.frameRate(7); }; function drawBlurCircles(x, y, r) { p5.push(); p5.noStroke(); var opc = 0.4; var step = 3.0/r; for (var i = r; i \u0026gt; 0; i-=1.5) { if (opc \u0026lt; 5) { opc += step; p5.fill(255, 20, 180, opc); } p5.ellipse(x, y, i, i); } p5.pop(); }; p5.draw = function() { p5.background(200); var numCircles = 12; var stepAngle = 360.0/numCircles; p5.push(); p5.translate(p5.width/2.0, p5.height/2.0); for (var i = 0; i \u0026lt; 360; i = i + stepAngle) { if (i != jump) { p5.push(); p5.rotate(p5.radians(i)); drawBlurCircles(120, 0, 60); p5.pop(); } } if( !p5.mouseIsPressed ) { jump = (jump + stepAngle)%360; } p5.push(); p5.strokeWeight(1.5); p5.line(-7, 0, 7, 0); p5.line(0, -7, 0, 7); p5.pop(); p5.pop(); } {{\u0026lt; /p5-instance-div \u0026gt;}} Note that p5 should be the name to be used for the sketch object variable. Video on canvas # Adapted from here. Don\u0026rsquo;t forget to checkout also the video on dom example.\np5-instance-div markdown {{\u0026lt; p5-instance-div id=\u0026#34;video\u0026#34; \u0026gt;}} let fingers; p5.setup = function() { p5.createCanvas(710, 400); // specify multiple formats for different browsers fingers = p5.createVideo([\u0026#39;/visualcomputing/sketches/fingers.mov\u0026#39;, \u0026#39;/visualcomputing/sketches/fingers.webm\u0026#39;]); fingers.hide(); // by default video shows up in separate dom // element. hide it and draw it to the canvas instead }; p5.draw = function() { p5.background(150); p5.image(fingers, 10, 10); // draw the video frame to canvas p5.filter(p5.GRAY); p5.image(fingers, 150, 150); // draw a second copy to canvas }; p5.mousePressed = function() { fingers.loop(); // set the video to loop and start playing } {{\u0026lt; /p5-instance-div \u0026gt;}} Note that p5 should be the name to be used for the sketch object variable. "},{"id":1,"href":"/visualcomputing/docs/shortcodes/p5/iframe/","title":"Iframe","section":"Docs","content":"p5 iframe shortcodes embed p5.js code within an iframe element. There are two p5 iframe shortcodes: p5-iframe and p5-global-iframe.\np5-iframe # {{\u0026lt; p5-iframe ver=\u0026#34;1.4.2\u0026#34; sketch=\u0026#34;/path/to/sketch.js\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;600\u0026#34; \u0026gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nColor relativity # Look at this brief explanation about what color relativity is.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/visualcomputing/sketches/colors.js\u0026#34; width=\u0026#34;725\u0026#34; height=\u0026#34;425 \u0026gt;}} Third party libraries # Example adapted from p5.EasyCam.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/visualcomputing/sketches/quick_easycam.js\u0026#34; lib1=\u0026#34;https://cdn.jsdelivr.net/gh/freshfork/p5.EasyCam@1.2.1/p5.easycam.min.js\u0026#34; width=\u0026#34;525\u0026#34; height=\u0026#34;525\u0026#34; \u0026gt;}} Sound # Example took from the p5 examples.\np5-iframe markdown {{\u0026lt; p5-iframe sketch=\u0026#34;/visualcomputing/sketches/sound.js\u0026#34; width=\u0026#34;225\u0026#34; height=\u0026#34;225\u0026#34; \u0026gt;}} p5-global-iframe # {{\u0026lt; p5-global-iframe id=\u0026#34;sketchid\u0026#34; ver=\u0026#34;1.4.2\u0026#34; lib1=\u0026#34;https://cdntolib1/lib1.js\u0026#34; width=\u0026#34;800\u0026#34; height=\u0026#34;600\u0026#34; \u0026gt;}} // inline sketch code {{\u0026lt; /p5-global-iframe \u0026gt;}} Note that the inline sketch should be coded in p5 global mode syntax. All parameters are optional but id. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.\nBreathing square # Look at this reference for an explanation and further parameterization of the illusion.\np5-global-iframe markdown {{\u0026lt; p5-global-iframe id=\u0026#34;breath\u0026#34; width=\u0026#34;625\u0026#34; height=\u0026#34;625\u0026#34; \u0026gt;}} // Coded as `global mode` of [this](https://github.com/VisualComputing/Cognitive/blob/gh-pages/sketches/rotateSquare.js) let angle = 0; let speed = 0.06; function setup() { createCanvas(600, 600); } function draw() { background(255, 255, 255); rotateSquare(); if (!mouseIsPressed) { strokeWeight(0); stroke(0); fill(255, 140, 0); rect(0, 0, 281, 281); rect(318, 0, 281, 281); rect(0, 318, 281, 281); rect(318, 318, 281, 281); } } function rotateSquare() { push(); angle += speed; strokeWeight(0); stroke(0); fill(0, 0, 255); translate(width / 2, height / 2); rotate(angle); rect(-187.5, -187.5, 375, 375); pop(); } {{\u0026lt; /p5-global-iframe \u0026gt;}} p5-widget # The p5-widget shortcode embed p5.js code within an p5-widget.\n{{\u0026lt; p5-widget autoplay=true height=\u0026#34;400\u0026#34; width=\u0026#34;400\u0026#34; ver=\u0026#34;1.4.2\u0026#34; \u0026gt;}} // inline sketch code {{\u0026lt; /p5-widget \u0026gt;}} All parameters are optional. Default ver is 1.4.2. For example:\nWidget example # p5-widget markdown {{\u0026lt; p5-widget autoplay=true height=\u0026#34;400\u0026#34; width=\u0026#34;400\u0026#34; ver=\u0026#34;1.4.2\u0026#34; \u0026gt;}} function setup() { createCanvas(300, 300); } function draw() { background(255, 0, 255); } {{\u0026lt; /p5-widget \u0026gt;}} "},{"id":2,"href":"/visualcomputing/docs/talleres/PrimerTaller/","title":"Primer Taller","section":"Talleres","content":" PrimerTaller # El primer taller consta de dos secciones, en la primera se tratará el tema de ilusiones visuales, apartado donde tenemos 3 ejemplos de ilusiones visuales; en la segunda se hará un procesamiento de imagen con múltiples filtros.\nCada ejemplo mostrado estará dividido en:\nEl Título del ejercicio Descripción breve del ejercicio Ejercicio implementado en p5.js Instrucciones de uso Código base del ejercicio para observar su funcionamiento Ilusiones Ópticas # Líneas verticales de grosor variable # Se inscribe sobre el canvas una serie de líneas verticales que son más gruesas a medida que se acercan al centro, y también varían respecto a la distancia del mouse hasta el centro, debido a esto, cada vez que se hacen más gruesas las líneas se hace la ilusión de un agujero/circulo negro se hace cada vez más grande.\nPara su uso, se implementa el mouse, a medida que este se mueve por el canvas se varía la intensidad del grosor de las lineas, siendo más oscuras cuando se acerca al centro y viceversa Código Fuente var pasos; var peso; var radio; function setup(){ createCanvas(500,300); pasos=5; peso=0; radio=5; } function draw(){ background(255); radio=50*(1-norm(Math.sqrt(Math.pow(width/2-mouseX,2)+Math.pow(height/2-mouseY,2)), 0, height)); for(var i=10; i\u0026lt;width;i+=10){ for(var j=0;j\u0026lt;height;j+=pasos){ strokeWeight(radio*(1-norm(Math.sqrt(Math.pow(width/2-i,2)+Math.pow(height/2-j,2)), 0, height))); line(i,j,i,j+pasos); } } fill(255); rect(width-215,height-35,width,height); fill(0); textSize(25); textStyle(BOLD); text(\u0026#39;Intensidad: \u0026#39;+ (radio | 0), width-190,height-10); } Patrón de muaré # Se busca retratar el patrón de Muaré donde se forman patrones de interferencia a gran escala que se puede producir cuando un patrón de rayas opacas con espacios transparentes se superpone a otro patrón similar, como en este caso usando un patrón de círculos que se superponen produciendo un extraño efecto ondulante que distrae nuestra atención.\nPara ajustar la velocidad y dirección del movimiento del circulo rojo, se usa el deslizador inferior. Código Fuente let x=0 let slider; function setup() { createCanvas(500, 500); rectMode(CENTER) slider = createSlider(-4, 4, 0, 0.0001); slider.position((width/2)-40, height); } function draw() { background(40); for(let i=0;i\u0026lt;500;i+=10){ stroke(\u0026#39;purple\u0026#39;) strokeWeight(3) ellipse(x,250,i-500,i-500) noFill() stroke(\u0026#39;blue\u0026#39;) strokeWeight(3) ellipse(width/2,height/2,i,i) } let s = slider.value() if(x\u0026gt;width){ x=0 }if(x\u0026lt;0){ x=width } else{ x=x+s } } Cuadrados con velocidad de rotación fija # Se crea un loop de cuadros donde la velocidad se hace cada vez más rápido de afuera hacia adentro, dando la sensación de la ilusión óptica donde se forman varios patrones de movimiento y formas, e incluso también dando la sensación de que se desacelera en un determinado momento.\nEl deslizador inferior ajusta la velocidad en que rotan los cuadrados. Código Fuente let slider; function setup() { createCanvas(600, 600); rectMode(CENTER); sliderX = 30; sliderY = 20; slider = createSlider(2, 8, 2, 1); slider.position((width/2)-40, height); } function draw() { background(255); fill(255, 150); rect(30, 70, 10, 120, 5); noFill(); translate(300, 300); let s = slider.value() if(s==0){ s=0.2 } for (let x = 420; x \u0026gt;= 40; x = x / 1.08) { rotate(radians(frameCount /s)); noStroke(); fill(127,204,x, 80); rect(0, 0, x, x); } } Procesamiento de imagen # Se crea un canvas con las dimensiones de la imagen y se le aplica un filtro a la imagen según la entrada del teclado. Las opciones posibles son: INVERT Establece cada píxel en su valor inverso. THRESHOLD, que convierte la imagen a pixeles blancos y negros dependiendo de si están arriba o abajo del umbral. GRAY, convierte cualquier color en la imagen a un equivalente en la escala de grises. DILATE, aumenta las áreas claras. ERODE, reduce las áreas claras. POSTERIZE, limita cada canal de la imagen a un número de colores especificado como parámetro. El parámetro puede definir entre 2 y 255 valores, pero los resultados más notorios se dan con valores bajos. BLUR, hace que la imagen sea borrosa con un proceso Gaussiano, siendo el parámetro el nivel de cuán borroso es el resultado, si no se usa ningún parámetro, el parámetro por defecto es 1, a mayores valores es más borroso el resultado.\nLos filtros se aplican según la tecla que ingrese el usuario\n1 aplica el filtro invertido 2 aplica el filtro Blanco y negro 3 aplica el filtro de escala de grises 4 aplica el filtro de dilatación 5 aplica el filtro de erosión 6 aplica el filtro de posterización con intensidad 2 7 aplica el filtro de posterización con intensidad 4 8 aplica el filtro de desenfoque con intensidad 3 9 aplica el filtro de desenfoque con intensidad 12 Código Fuente let img; function preload() { img = loadImage(\u0026#34;/visualcomputing/sketches/imagen.jpg\u0026#34;); } function setup() { createCanvas(600, 1068); } function draw() { image(img, 0, 0); if (key === \u0026#34;1\u0026#34;) { filter(INVERT); label(\u0026#34;INVERT\u0026#34;); } else if (key === \u0026#34;2\u0026#34;) { filter(THRESHOLD); label(\u0026#34;THRESHOLD\u0026#34;); } else if (key === \u0026#34;3\u0026#34;) { filter(GRAY); label(\u0026#34;GRAY\u0026#34;); } else if (key === \u0026#34;4\u0026#34;) { filter(DILATE); label(\u0026#34;DILATE\u0026#34;); } else if (key === \u0026#34;5\u0026#34;) { filter(ERODE); label(\u0026#34;ERODE\u0026#34;); } else if (key === \u0026#34;6\u0026#34;) { filter(POSTERIZE, 2); label(\u0026#34;POSTERIZE 2\u0026#34;); } else if (key === \u0026#34;7\u0026#34;) { filter(POSTERIZE, 4); label(\u0026#34;POSTERIZE 4\u0026#34;); } else if (key === \u0026#34;8\u0026#34;) { filter(BLUR, 3); label(\u0026#34;BLUR 3\u0026#34;); } else if (key === \u0026#34;9\u0026#34;) { filter(BLUR, 12); label(\u0026#34;BLUR 12\u0026#34;); } } function label(s) { fill(0); rectMode(CENTER); rect(width/2, height - 20, 120, 20); textAlign(CENTER, CENTER); fill(255); textSize(16); text(s, width/2, height - 20); } Histograma de los canales RGB # En este histograma se dibuja la imagen de fondo y por encima se describen los histogramas para cada canal de color, en donde el eje X es el valor de ese canal (0 a 255) y en el eje Y el número de ocurrencias de ese valor en la imagen.\nCódigo Fuente let img; let R=[]; let G=[]; let B=[]; function preload() { img = loadImage(\u0026#34;/visualcomputing/sketches/imagen.jpg\u0026#34;); for(var i=0; i\u0026lt;256;i++){ R[i]=0; G[i]=0; B[i]=0; } } function setup() { createCanvas(600, 850); background(255); noLoop(); } function draw() { image(img, 0, 0); loadPixels(); for(var x=0;x\u0026lt;img.width;x++){ for(var y=0; y\u0026lt;img.height;y++){ var px= (x+y*img.width)*4; R[pixels[px+0]]+=1; G[pixels[px+1]]+=1; B[pixels[px+2]]+=1; } } fill(255,255,255,150); noStroke(); rect(50,height/4,255,-150); rect(50,height/4*2,255,-150); rect(50,height/4*3,255,-150); for(var i=0; i\u0026lt;256;i++){ stroke(255,0,0); line(50+i,height/4,50+i,height/4-norm(R[i],0,100)); stroke(0,255,0); line(50+i,height/4*2,50+i,height/4*2-norm(G[i],0,100)); stroke(0,0,255); line(50+i,height/4*3,50+i,height/4*3-norm(B[i],0,100)); } fill(0); noStroke(); textSize(35); textStyle(BOLD); text(\u0026#39; Canal Rojo\u0026#39;, 305, height/4); text(\u0026#39; Canal Verde\u0026#39;, 305, height/4*2); text(\u0026#39; Canal Azul\u0026#39;, 305, height/4*3); } "}]